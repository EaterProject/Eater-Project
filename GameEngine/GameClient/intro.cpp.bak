#include "MainHeader.h"
#include "intro.h"
#include "GameObject.h"
#include "MeshFilter.h"
#include "SkinningFilter.h"
#include "AnimationController.h"
#include "Transform.h"
#include "AI.h"
#include "Player.h"
#include "KeyInput.h"
#include "Camera.h"
#include "Light.h"
#include "Terrain.h"
#include "Rigidbody.h"
#include "ClientNetworkManager.h"
#include "ParticleSystem.h"
#include "PhysData.h"
#include "PortIPDefine.h"
#include "PlayerCamera.h"
#include "TestPlayer.h"
#include "Monster.h"
#include "ParticleSystem.h"
//#include "Manastone.h"

void intro::Awake()
{
	GameObject* gameobject = GetMainCamera();
	DebugCam = gameobject->GetComponent<Camera>();
	
	//게임에 사용할 카메라를 만들어준다
	GameObject* Cam = InstanceCamera();
	MainCam = Cam->GetComponent<Camera>();
	PlayerCamera* PC = Cam->AddComponent<PlayerCamera>();
	MainCam->ChoiceMainCam();
	Cam->SetDontDestroy(true);
	
	
	GameObject* Obj = Instance();
	Obj->AddComponent<MeshFilter>();
	Obj->AddComponent<TestPlayer>();
	//Obj->AddComponent<AnimationController>();
	Obj->AddComponent<Rigidbody>();
	Obj->SetDontDestroy(true);
	Obj->GetTransform()->Scale = { 0.25f,0.25f ,0.25f };
	PC->Userobject = Obj;

<<<<<<< HEAD
	//LoadUnityFile("../Resources/Data/Collider.Eater");

	//StartNetwork();
=======
	LoadUnityFile("../Resources/Data/Collider.Eater");

	//StartNetwork();

	CreateMap();
>>>>>>> main

	//CreateMap();

<<<<<<< HEAD

=======
>>>>>>> main
	SetEnvironment(true);
	CreateTerrain();

	// Test Object
	//CreateTestObject();

	//CreateParticles(0,0,5);

<<<<<<< HEAD
	//CreateMonster();

	GameObject* obj = Instance();
	Rigidbody* rig = obj->AddComponent<Rigidbody>();
	rig->SetPosition(5, 20, 0);
	rig->CreateBoxCollider(0.5f);
	obj->GetTransform()->Scale = { 0.5f,0.5f ,0.5f };
=======
	CreateMonster();
>>>>>>> main
}

void intro::Update()
{
	ChangeCubeMap();

	//플레이어 카메라
	if (GetKeyDown(VK_F7))
	{
		MainCam->ChoiceMainCam();
	}

	//자유시점 카메라
	if (GetKeyDown(VK_F8))
	{
		DebugCam->ChoiceMainCam();
	}

}

void intro::End()
{

}

void intro::CreateMonster()
{
	GameObject* obj = Instance();
	obj->AddComponent<MeshFilter>();
	obj->AddComponent<Monster>();
	obj->AddComponent<AnimationController>();
}

void intro::CreateTerrain()
{
	///터레인
	testobj = InstanceTerrain("Terrain");
	Terrain* mTerrain = testobj->GetComponent<Terrain>();
	mTerrain->SetLayerName("terrain_ground_A_BaseColor", "terrain_ground_A_Normal", "terrain_ground_A_ORM");
	mTerrain->SetLayerName("terrain_ground_B_BaseColor", "terrain_ground_B_Normal", "terrain_ground_B_ORM");
	mTerrain->SetMeshName("Terrain");
	mTerrain->SetColliderName("TerrainDecimate");
	mTerrain->SetTextureTiling(1.0f / 31.0f);
}

void intro::CreateMap()
{
	Transform* Tr = nullptr;
	MeshFilter* filter = nullptr;
	GameObject* Object = nullptr;

	Object = Instance();
	filter = Object->AddComponent<MeshFilter>();
	filter->SetMeshName("Dome");

	Object = Instance();
	filter = Object->AddComponent<MeshFilter>();
	filter->SetMeshName("Inside_village");

	Object = Instance();
	filter = Object->AddComponent<MeshFilter>();
	Tr = Object->GetTransform();
	filter->SetMeshName("Outside_Rock");

	Object = Instance();
	filter = Object->AddComponent<MeshFilter>();
	filter->SetMeshName("Outside_bossOBJ");

	Object = Instance();
	filter = Object->AddComponent<MeshFilter>();
	filter->SetMeshName("Outside_Other");

	//Object = Instance();
	//filter = Object->AddComponent<MeshFilter>();
	//filter->SetMeshName("Outside_Pebble");

	Object = Instance();
	filter = Object->AddComponent<MeshFilter>();
	filter->SetMeshName("MonsterB");
	Object->GetTransform()->Position = { 7,0,0 };
	Object->GetTransform()->Scale = { 0.02f, 0.02f, 0.02f };
}

void intro::StartNetwork()
{
	//엔진과 통신할 매니저 제작
	GameObject* NetManager = Instance("NetwrokManager");
	NetManager->SetTag("Network");
	NetManager->SetDontDestroy(true);
	ClientNetworkManager* Manager = NetManager->AddComponent<ClientNetworkManager>();

	//네트워크 연결
	Network_Connect(GAME_SERVER_PORT_1, LOCAL_CONNECT_IP);

	//매니저를 서버로 보내줌
	Network_SetManager(Manager);

	if (GetKey(VK_SPACE))
	{
		Network_Loading_complete(0);
	}
	else
	{
		Network_Loading_complete(1);
	}

}

void intro::CreateParticles(float x, float y, float z)
{
	ParticleObj = Instance();
	ParticleObj->GetTransform()->Position = { x,y,z };
	testobj = InstanceParticle("Particle1");
	ParticleObj->ChoiceChild(testobj);
	ParticleSystem* particles = testobj->GetComponent<ParticleSystem>();
	particles->SetMeshName("Quad");
	particles->SetRenderType(PARTICLE_RENDER_OPTION::VERTICAL_BILLBOARD);
	particles->SetDiffuseName("particle_hotCloud");
	particles->SetStartLifeTime(1.5f, 1.8f);
	particles->SetStartScale(4.0f, 7.0f);
	particles->SetStartRotation(-360, 360);
	particles->SetStartColor(Vector4(43, 74, 255, 120), Vector4(23, 111, 255, 255));
	particles->SetMaxParticles(30);
	particles->SetRateOverTime(15.0f);
	particles->SetShapeRadius(0.1875f);
	particles->SetStartForce(Vector3(0, 5, 0));
	particles->SetLifeTimeRotation(-15.0f, 15.0f);
	particles->SetLifeTimeColor(Vector4(255, 255, 255, 50), Vector4(255, 255, 255, 255), PARTICLE_LIFETIME_OPTION::UPDOWN);
	particles->SetTextureTiling(8, 8);
	particles->SetPlayTime(10.0f, true);
	particles->Play();
<<<<<<< HEAD
=======

	//testobj = InstanceParticle("Particle2");
	//ParticleObj->ChoiceChild(testobj);
	//particles = testobj->GetComponent<ParticleSystem>();
	//particles->SetMeshName("Quad");
	//particles->SetDiffuseName("particle_blast4");
	//particles->SetStartLifeTime(1.0f, 2.0f);
	//particles->SetStartScale(7.0f, 9.125f);
	//particles->SetStartRotation(-360, 360);
	//particles->SetStartColor(Vector4(25, 25, 25, 50));
	//particles->SetMaxParticles(20);
	//particles->SetRateOverTime(10.0f);
	//particles->SetShapeRadius(0.1f);
	//particles->SetStartForce(Vector3(0, 7.5f, 0));
	//particles->SetLifeTimeScale(0.25f, 1.0f, PARTICLE_LIFETIME_OPTION::UP);
	//particles->SetLifeTimeColor(Vector4(255, 255, 255, 0), Vector4(255, 255, 255, 255), PARTICLE_LIFETIME_OPTION::UPDOWN);
	//particles->SetLifeTimeRotation(-15.0f, 15.0f);
	//particles->SetTextureTiling(8, 8);
	//particles->SetPlayTime(10.0f, true);
	//particles->Play(true);
	//
	//ParticleObj = Instance();
	//ParticleObj->GetTransform()->Position = { -x,-y,-z };
	//testobj = InstanceParticle("Particle1");
	//ParticleObj->ChoiceChild(testobj);
	//particles = testobj->GetComponent<ParticleSystem>();
	//particles->SetMeshName("Quad");
	//particles->SetRenderType(PARTICLE_RENDER_OPTION::VERTICAL_BILLBOARD);
	//particles->SetDiffuseName("particle_hotCloud");
	//particles->SetStartLifeTime(1.5f, 1.8f);
	//particles->SetStartScale(4.0f, 7.0f);
	//particles->SetStartRotation(-360, 360);
	//particles->SetStartColor(Vector4(255, 74, 43, 120), Vector4(255, 111, 23, 255));
	//particles->SetMaxParticles(30);
	//particles->SetRateOverTime(15.0f);
	//particles->SetShapeRadius(0.1875f);
	//particles->SetStartForce(Vector3(0, 5, 0));
	//particles->SetLifeTimeRotation(-15.0f, 15.0f);
	//particles->SetLifeTimeColor(Vector4(255, 255, 255, 50), Vector4(255, 255, 255, 255), PARTICLE_LIFETIME_OPTION::UPDOWN);
	//particles->SetTextureTiling(8, 8);
	//particles->SetPlayTime(10.0f, true);
	//particles->Play();
	//
	//testobj = InstanceParticle("Particle2");
	//ParticleObj->ChoiceChild(testobj);
	//particles = testobj->GetComponent<ParticleSystem>();
	//particles->SetMeshName("Quad");
	//particles->SetDiffuseName("particle_blast4");
	//particles->SetStartLifeTime(1.0f, 2.0f);
	//particles->SetStartScale(7.0f, 9.125f);
	//particles->SetStartRotation(-360, 360);
	//particles->SetStartColor(Vector4(25, 25, 25, 50));
	//particles->SetMaxParticles(20);
	//particles->SetRateOverTime(10.0f);
	//particles->SetShapeRadius(0.1f);
	//particles->SetStartForce(Vector3(0, 7.5f, 0));
	//particles->SetLifeTimeScale(0.25f, 1.0f, PARTICLE_LIFETIME_OPTION::UP);
	//particles->SetLifeTimeColor(Vector4(255, 255, 255, 0), Vector4(255, 255, 255, 255), PARTICLE_LIFETIME_OPTION::UPDOWN);
	//particles->SetLifeTimeRotation(-15.0f, 15.0f);
	//particles->SetTextureTiling(8, 8);
	//particles->SetPlayTime(10.0f, true);
	//particles->Play(true);
>>>>>>> main
}

void intro::CreateTestObject()
{
	MeshFilter* MF;

	for (int i = 0; i < 10; i++)
	{
		std::string num = std::to_string(9 - i);

		testobj = Instance("box");
		testobj->AddComponent<MeshFilter>()->SetMeshName("TestSphere");
		MF = testobj->GetComponent<MeshFilter>();
		MF->SetDiffuseTextureName("Albedo_" + num);
		MF->SetNormalTextureName("Normal_" + num);
		MF->SetORMTextureName("ORM_" + num);
		testobj->GetTransform()->Position = { -150.0f + 30.0f * i, 75.0f, 0.0f };
		testobj->GetTransform()->Rotation = { 90.0f, 0.0f, 0.0f };
		testobj->GetTransform()->Scale = { 5.0f, 5.0f, 5.0f };
	}
}

void intro::ChangeCubeMap()
{
	if (GetKeyUp('1'))
	{
		LoadEnvironment("../Resources/Texture/Environment/Day.dds");
		SetEnvironment(true);
	}
	if (GetKeyUp('2'))
	{
		LoadEnvironment("../Resources/Texture/Environment/Night.dds");
		SetEnvironment(true);
	}
	if (GetKeyUp('3'))
	{
		LoadEnvironment("../Resources/Texture/Environment/skybox1.dds");
		SetEnvironment(true);
	}
	if (GetKeyUp('4'))
	{
		LoadEnvironment("../Resources/Texture/Environment/TestSky.dds");
		SetEnvironment(true);
	}
}
