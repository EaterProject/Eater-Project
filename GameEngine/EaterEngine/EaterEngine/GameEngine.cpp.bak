#include "GameEngine.h"

//매니저들
#include "BaseManager.h"
#include "KeyinputManager.h"
#include "LoadManager.h"
#include "ObjectManager.h"
#include "SceneManager.h"
#include "DebugManager.h"
#include "GraphicEngineManager.h"
#include "TimeManager.h"
#include "MaterialManager.h"
#include "LightManager.h"
#include "PhysManager.h"
#include "NetworkManager.h"

#include "ParserData.h"
#include "EngineData.h"
//오브젝트
#include "GameObject.h"

//컨퍼넌트
#include "Transform.h"
#include "Camera.h"
#include "MeshFilter.h"
#include "SkinningFilter.h"
#include "Light.h"
#include "Rigidbody.h"
#include "Material.h"
#include "Terrain.h"
#include "ParticleSystem.h"
#include "CameraDebugKeyInput.h"


GameEngine::GameEngine()
{
	InitializeCriticalSection(&g_CS);

	mDebugManager = nullptr;
	mLoadManager = nullptr;
	mObjectManager = nullptr;
	mSceneManager = nullptr;
	mKeyManager = nullptr;
	mPhysManager = nullptr;
	mLightManager = nullptr;
	mMaterialManager = nullptr;
	mTimeManager = nullptr;
	mGraphicManager = nullptr;
	mNetworkManager = nullptr;

	//기본 윈도우 사이즈 설정
	WinSizeWidth = 1920;
	WinSizeHeight = 1080;

	//윈도우 핸들
	mHwnd = NULL;

	ConsoleDebug = true;

	m_RenderOption = RENDER_DEBUG | RENDER_GAMMA_CORRECTION | RENDER_SHADOW | RENDER_SSAO | RENDER_OIT | RENDER_PBR | RENDER_IBL | RENDER_FXAA;
}

GameEngine::~GameEngine()
{

}

///게임 엔진 관련
void GameEngine::Initialize(HWND Hwnd, bool mConsoleDebug)
{
	//클라쪽에서 넘겨준 데이터 받기
	mHwnd = Hwnd;

	//매니저들 생성
	mKeyManager			= new KeyinputManager();
	mLoadManager		= new LoadManager();
	mObjectManager		= new ObjectManager();
	mSceneManager		= new SceneManager();
	mDebugManager		= new DebugManager();
	mGraphicManager		= new GraphicEngineManager();
	mTimeManager		= new TimeManager();
	mMaterialManager	= new MaterialManager();
	mLightManager		= new LightManager();
	mPhysManager		= new PhysManager();
	mNetworkManager		= new NetworkManager();

	//매니저들 초기화
	BaseManager::Initialize();
	mGraphicManager->Initialize(Hwnd, WinSizeWidth, WinSizeHeight, mObjectManager);
	mKeyManager->Initialize(mHwnd);
	mDebugManager->Initialize(mKeyManager,mConsoleDebug);
	mObjectManager->Initialize(mHwnd);
	mSceneManager->Initialize(mObjectManager);
	mLoadManager->Initialize(mGraphicManager, &g_CS);
	mTimeManager->Initialize();
	mLightManager->Initialize();
	mMaterialManager->Initialize();
	mPhysManager->Initialize();
	mNetworkManager->Initialize();

	Component::SetManager(mTimeManager, mKeyManager);
}

void GameEngine::Start()
{
	//매니저 초기화 후 추가 작업들
	mLoadManager->Start();

	//카메라처음 생성 키인풋을 받을수있도록 컨퍼넌트 붙임
	GameObject* obj = InstanceCamera();
	obj->AddComponent<CameraDebugKeyInput>();
	obj->SetDontDestroy(true);
	obj->SetTag("MainCamera");

	//디렉션 라이트 생성
	obj = InstanceLight();
	obj->transform->Position.y += 10.0f;
	obj->SetDontDestroy(true);
}

void GameEngine::Update()
{
	//매니저들 업데이트 (컨퍼넌트 업데이트후 변경된 사항을 각각의 게임오브젝트 OneMeshData에 전달)
	//타임매니저는 먼저실행되어야함
	mNetworkManager->Update();
	mTimeManager->Update();
	mKeyManager->Update();
	mSceneManager->Update();
	mDebugManager->Update();
	mObjectManager->PlayUpdate();
	mPhysManager->Update(mTimeManager->DeltaTime());
	// 모든 업데이트가 일어난 후 데이터 세팅..
	BaseManager::UpdateGlobalData();

	//컨퍼넌트 업데이트 끝

	// 현재 랜더링 옵션 설정..
	RenderOptionCheck();

	//랜더큐 넘겨줌
	EnterCriticalSection(&g_CS);
	mGraphicManager->RenderSetting(m_RenderOption);
	mGraphicManager->ShadowRender(mObjectManager->GetRenderQueue(), mObjectManager->GetGlobalData());
	mGraphicManager->MainRender(mObjectManager->GetRenderQueue(), mObjectManager->GetGlobalData());
	mGraphicManager->SSAORender(mObjectManager->GetGlobalData());
	mGraphicManager->UIRender(mObjectManager->GetRenderQueue(), mObjectManager->GetGlobalData());
	mGraphicManager->LightRender(mObjectManager->GetGlobalData());
	mGraphicManager->AlphaRender(mObjectManager->GetRenderQueue(), mObjectManager->GetGlobalData());
	mGraphicManager->PostProcessingRender();

	if (m_RenderOption & RENDER_DEBUG)
	{
		mGraphicManager->DebugRender(mObjectManager->GetRenderQueue(), mObjectManager->GetGlobalData());
	}

	mGraphicManager->EndRender();
	LeaveCriticalSection(&g_CS);

	//랜더링이 끝나고 오브젝트 Delete
	mObjectManager->DeleteObject();
}

void GameEngine::Finish()
{
	delete mKeyManager;
	delete mLoadManager;

	mDebugManager->Delete();
	mSceneManager->Delete();

	BaseManager::Reset();
}

void GameEngine::OnResize(int Change_Width, int Change_Height)
{
	// 창 최소화시는 제외
	if (Change_Width == 0 || Change_Height == 0) return;
	if (mGraphicManager == nullptr) return;

	//윈도우 크기 재설정
	WinSizeWidth = Change_Width;
	WinSizeHeight = Change_Height;

	DebugManager::Print(std::to_string(Change_Width).c_str());
	DebugManager::Print(std::to_string(Change_Height).c_str());

	//카메라의 변화할 사이즈를 넣어준다
	Camera::g_MainCam->SetSize(Change_Width, Change_Height);

	//그래픽쪽에 랜더타겟을 변경해야하기때문에 
	mGraphicManager->OnReSize(Change_Width, Change_Height);
	Camera::g_MainCam->CreateProj(Change_Width, Change_Height);


	std::string Width = std::to_string(Change_Width);
	std::string Height = std::to_string(Change_Height);;
	std::string temp = "윈도우 사이즈 변경:" + Width + "," + Height;
	Camera::g_MainCam->SetSize(Change_Width, Change_Height);
}

///오브젝트 생성 삭제
GameObject* GameEngine::Instance(std::string ObjName)
{
	DebugManager::Line("(Mesh)");
	//오브젝트 생성
	GameObject* temp = new GameObject();
	temp->Name = ObjName;
	temp->SetTag("Mesh");
	DebugManager::Print(DebugManager::MSG_TYPE::MSG_CREATE, "GameObject", ObjName, false);

	//Transform 은 기본으로 넣어준다
	Transform* Tr = temp->AddComponent<Transform>();
	temp->transform = Tr;


	return temp;
}

GameObject* GameEngine::InstanceTerrain(std::string ObjName)
{
	DebugManager::Line("(Terrain)");
	GameObject* temp = new GameObject();
	temp->Name = ObjName;
	temp->SetTag("Terrain");
	DebugManager::Print(DebugManager::MSG_TYPE::MSG_CREATE, "Terrain", ObjName, false);

	//Transform
	Transform* Tr = temp->AddComponent<Transform>();
	temp->transform = Tr;

	temp->AddComponent<MeshFilter>();
	temp->AddComponent<Rigidbody>();
	temp->AddComponent<Terrain>();


	return temp;
}

GameObject* GameEngine::InstanceParticle(std::string ObjName /*= "Particle"*/)
{
	DebugManager::Line("(Particle)");
	GameObject* temp = new GameObject();
	temp->Name = ObjName;
	temp->SetTag("Particle");
	DebugManager::Print(DebugManager::MSG_TYPE::MSG_CREATE, "Particle", ObjName, false);

	//Transform
	Transform* Tr = temp->AddComponent<Transform>();
	temp->transform = Tr;

	temp->AddComponent<MeshFilter>();
	temp->AddComponent<ParticleSystem>();

	return temp;
}

GameObject* GameEngine::InstanceCamera(std::string ObjName)
{
	DebugManager::Line("(Camera)");
	GameObject* temp = new GameObject();
	temp->Name = "Camera";
	Transform* Tr = temp->AddComponent<Transform>();
	temp->transform = Tr;
	Tr->Position = { 0,5,-25 };

	temp->AddComponent<Camera>();
	
	return temp;
}

GameObject* GameEngine::InstanceLight(std::string ObjName, LIGHT_TYPE type)
{
	DebugManager::Line("(Light)");
	GameObject* temp = new GameObject();
	temp->Name = "Light";

	Transform* Tr = temp->AddComponent<Transform>();
	temp->transform = Tr;

	temp->AddComponent<Light>()->SetType(type);

	return temp;
}

GameObject* GameEngine::FindGameObjectTag(std::string& TagName)
{
	return mObjectManager->FindGameObjectTag(TagName);
}

GameObject* GameEngine::FindGameObjectName(std::string& ObjName)
{
	return mObjectManager->FindGameObjectString(ObjName);
}

void GameEngine::Destroy(GameObject* obj)
{
	mObjectManager->PushDeleteObject(obj);
}

/// 스크린 관련 함수들
void GameEngine::PushScene(Scene* mScene, std::string name)
{
	std::string mStr = "씬 생성 :" + name;
	mSceneManager->PushScene(mScene, name);
}

void GameEngine::ChoiceScene(std::string name)
{
	DebugManager::Print(DebugManager::MSG_TYPE::MSG_SYSTEM, "현재 씬:", name, false);

	//씬 선택이 되면 씬자체의 Awack와 Start 함수 실행 그리고나서 컨퍼넌트의 Awack와 Start 도 실행 
	mSceneManager->ChoiceScene(name);
	mSceneManager->SceneStart();
}

///로드 관련 함수들
void GameEngine::LoadMesh(std::string mMeshName, UINT parsingMode)
{
	mLoadManager->LoadMesh(mMeshName, parsingMode);
}

void GameEngine::LoadTerrain(std::string mMeshName, std::string mMaskName, UINT parsingMode)
{
	mLoadManager->LoadTerrain(mMeshName, mMaskName, parsingMode);
}

void GameEngine::LoadTexture(std::string mTextureName)
{
	mLoadManager->LoadTexture(mTextureName);
}

void GameEngine::LoadTextureFile(std::string& FileName)
{
	mLoadManager->LoadTextureFile(FileName);
}

void GameEngine::LoadMeshFile(std::string& FileName, UINT parsingMode)
{
	mLoadManager->LoadMeshFile(FileName, parsingMode);
}

<<<<<<< HEAD
void GameEngine::LoadUnityFile(std::string& FileName)
{
	mLoadManager->LoadUnityData(FileName);
}

void GameEngine::LoadEaterFile(std::string& FileName)
{

=======
void GameEngine::LoadEnvironment(std::string mPath)
{
	mGraphicManager->LoadEnvironment(mPath);
}

void GameEngine::SetEnvironment(bool enable)
{
	mGraphicManager->SetEnvironment(enable);
>>>>>>> main
}

void GameEngine::LoadMeshPath(std::string mPath)
{
	mLoadManager->LoadMeshPath(mPath);
}

void GameEngine::LoadTexturePath(std::string mPath)
{
	mLoadManager->LoadTexturePath(mPath);
}

///키인풋 함수들
bool GameEngine::GetKeyDown(byte number)
{
	//키를 한번 눌렀을때  true
	return mKeyManager->GetKeyDown(number);
}

bool GameEngine::GetKeyUp(byte number)
{
	//키를 한번땠을때 true
	return mKeyManager->GetKeyUp(number);
}

bool GameEngine::GetKey(byte number)
{
	//키를누르고있을때 프레임마다 true
	return mKeyManager->GetKey(number);
}

bool GameEngine::GetTogle(byte number)
{
	//한번 키를 누르면 on 다시누르면 off
	return mKeyManager->GetKeyToggle(number);
}

float GameEngine::GetMousePosX()
{
	//마우스 위치 X좌표
	return (float)mKeyManager->GetMousePos()->x;
}

float GameEngine::GetMousePosY()
{
	//마우스 위치 y좌표
	return (float)mKeyManager->GetMousePos()->y;
}

void GameEngine::SetMousePos(float x, float y)
{

}

void GameEngine::SetMousePosCenter()
{

}

void GameEngine::ShowMouseCursor(bool Show)
{

}

void GameEngine::MouseCursorClip(bool Clip)
{

}

GameObject* GameEngine::GetMainCamera()
{
	return Camera::g_MainCam->gameobject;
}

float GameEngine::GetdeltaTime()
{
	return mTimeManager->DeltaTime();
}

void GameEngine::SetNetworkManager(NetworkManagerComponent* Manager)
{
	mNetworkManager->SetClientNetworkManager(Manager);
}

void GameEngine::NETWORK_SEND(flatbuffers::FlatBufferBuilder* Builder, int Type)
{
	mNetworkManager->NETWORK_SEND(Builder, Type);
}

void GameEngine::NETWORK_LOADING_COMPLETE(unsigned int Number)
{
	mNetworkManager->C2S_LOADING_COMPLETE(Number);
}

void GameEngine::NETWORK_CONNECT(int ServerPort, std::string  Local_Connect_IP)
{
	mNetworkManager->C2S_CONNECT(ServerPort, Local_Connect_IP);
}

void GameEngine::DebugDrawLine(Vector3 start, Vector3 end, Vector4 color)
{
	mGraphicManager->DebugDrawLine(start, end, color);
}

void GameEngine::DebugDrawLine(Vector3 start, Vector3 dir, float distance, Vector4 color)
{
	mGraphicManager->DebugDrawLine(start, dir, distance, color);
}

void GameEngine::CreateObject()
{
	GameObject* light = Instance();
	light->AddComponent<Light>()->SetType(LIGHT_TYPE::DIRECTION_LIGHT);
}

void GameEngine::RenderOptionCheck()
{
	if (mKeyManager->GetKeyUp(VK_F1))
	{
		// Debug On/Off
		m_RenderOption ^= RENDER_DEBUG;
	}
	if (mKeyManager->GetKeyUp(VK_F2))
	{
		// Gamma Correction On/Off
		m_RenderOption ^= RENDER_GAMMA_CORRECTION;
	}
	if (mKeyManager->GetKeyUp(VK_F3))
	{
		// Shadow On/Off
		m_RenderOption ^= RENDER_SHADOW;
	}
	if (mKeyManager->GetKeyUp(VK_F4))
	{
		// SSAO On/Off
		m_RenderOption ^= RENDER_SSAO;
	}
	if (mKeyManager->GetKeyUp(VK_F5))
	{
		// OIT On/Off
		m_RenderOption ^= RENDER_OIT;
	}
	if (mKeyManager->GetKeyUp(VK_F6))
	{
		// OIT On/Off
		m_RenderOption ^= RENDER_PBR;
	}
	if (mKeyManager->GetKeyUp(VK_F7))
	{
		// OIT On/Off
		m_RenderOption ^= RENDER_FXAA;
	}
	if (mKeyManager->GetKeyUp(VK_F8))
	{
		// OIT On/Off
		m_RenderOption ^= RENDER_IBL;
	}
}
