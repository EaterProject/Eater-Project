// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_LOGINLOBBY_EATER_LOGINLOBBY_H_
#define FLATBUFFERS_GENERATED_LOGINLOBBY_EATER_LOGINLOBBY_H_

#include "flatbuffers/flatbuffers.h"

namespace Eater {
namespace LoginLobby {

struct CurrentLobbyState;
struct CurrentLobbyStateBuilder;

struct UserState;
struct UserStateBuilder;

struct LoginUser;
struct LoginUserBuilder;

struct LogoutUser;
struct LogoutUserBuilder;

struct CurrentLobbyState FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CurrentLobbyStateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_USERS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Eater::LoginLobby::UserState>> *users() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Eater::LoginLobby::UserState>> *>(VT_USERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_USERS) &&
           verifier.VerifyVector(users()) &&
           verifier.VerifyVectorOfTables(users()) &&
           verifier.EndTable();
  }
};

struct CurrentLobbyStateBuilder {
  typedef CurrentLobbyState Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_users(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Eater::LoginLobby::UserState>>> users) {
    fbb_.AddOffset(CurrentLobbyState::VT_USERS, users);
  }
  explicit CurrentLobbyStateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CurrentLobbyState> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CurrentLobbyState>(end);
    return o;
  }
};

inline flatbuffers::Offset<CurrentLobbyState> CreateCurrentLobbyState(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Eater::LoginLobby::UserState>>> users = 0) {
  CurrentLobbyStateBuilder builder_(_fbb);
  builder_.add_users(users);
  return builder_.Finish();
}

inline flatbuffers::Offset<CurrentLobbyState> CreateCurrentLobbyStateDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Eater::LoginLobby::UserState>> *users = nullptr) {
  auto users__ = users ? _fbb.CreateVector<flatbuffers::Offset<Eater::LoginLobby::UserState>>(*users) : 0;
  return Eater::LoginLobby::CreateCurrentLobbyState(
      _fbb,
      users__);
}

struct UserState FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef UserStateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATE = 4,
    VT_ID = 6
  };
  uint8_t state() const {
    return GetField<uint8_t>(VT_STATE, 0);
  }
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_STATE) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           verifier.EndTable();
  }
};

struct UserStateBuilder {
  typedef UserState Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_state(uint8_t state) {
    fbb_.AddElement<uint8_t>(UserState::VT_STATE, state, 0);
  }
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(UserState::VT_ID, id);
  }
  explicit UserStateBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<UserState> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<UserState>(end);
    return o;
  }
};

inline flatbuffers::Offset<UserState> CreateUserState(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t state = 0,
    flatbuffers::Offset<flatbuffers::String> id = 0) {
  UserStateBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_state(state);
  return builder_.Finish();
}

inline flatbuffers::Offset<UserState> CreateUserStateDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t state = 0,
    const char *id = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  return Eater::LoginLobby::CreateUserState(
      _fbb,
      state,
      id__);
}

struct LoginUser FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LoginUserBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_ID = 6
  };
  uint32_t key() const {
    return GetField<uint32_t>(VT_KEY, 0);
  }
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_KEY) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           verifier.EndTable();
  }
};

struct LoginUserBuilder {
  typedef LoginUser Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(uint32_t key) {
    fbb_.AddElement<uint32_t>(LoginUser::VT_KEY, key, 0);
  }
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(LoginUser::VT_ID, id);
  }
  explicit LoginUserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<LoginUser> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LoginUser>(end);
    return o;
  }
};

inline flatbuffers::Offset<LoginUser> CreateLoginUser(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t key = 0,
    flatbuffers::Offset<flatbuffers::String> id = 0) {
  LoginUserBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_key(key);
  return builder_.Finish();
}

inline flatbuffers::Offset<LoginUser> CreateLoginUserDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t key = 0,
    const char *id = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  return Eater::LoginLobby::CreateLoginUser(
      _fbb,
      key,
      id__);
}

struct LogoutUser FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef LogoutUserBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_ID = 6
  };
  uint32_t key() const {
    return GetField<uint32_t>(VT_KEY, 0);
  }
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_KEY) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           verifier.EndTable();
  }
};

struct LogoutUserBuilder {
  typedef LogoutUser Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(uint32_t key) {
    fbb_.AddElement<uint32_t>(LogoutUser::VT_KEY, key, 0);
  }
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(LogoutUser::VT_ID, id);
  }
  explicit LogoutUserBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<LogoutUser> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<LogoutUser>(end);
    return o;
  }
};

inline flatbuffers::Offset<LogoutUser> CreateLogoutUser(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t key = 0,
    flatbuffers::Offset<flatbuffers::String> id = 0) {
  LogoutUserBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_key(key);
  return builder_.Finish();
}

inline flatbuffers::Offset<LogoutUser> CreateLogoutUserDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t key = 0,
    const char *id = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  return Eater::LoginLobby::CreateLogoutUser(
      _fbb,
      key,
      id__);
}

}  // namespace LoginLobby
}  // namespace Eater

#endif  // FLATBUFFERS_GENERATED_LOGINLOBBY_EATER_LOGINLOBBY_H_
